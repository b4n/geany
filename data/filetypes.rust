# For complete documentation of this file, please see Geany's main documentation
[styling=C]

[keywords]
# all items must be in one line
primary=alignas and and_eq asm bitand bitor bool break char const do double else enum extern false float for if int int8_t int16_t int32_t int64_t not not_eq operator or or_eq return short signed size_t true typeid unsigned wchar_t while xor xor_eq let fn struct trait impl enum static type macro_rules as in match loop ref pub priv use mod mut unsafe uint i8 i16 i32 i64 u8 u16 u32 u64 s8 s16 s32 s64 float32 float64 str c_void c_float c_int c_char c_str
secondary=
# these are the Doxygen keywords
docComment=a addindex addtogroup anchor arg attention author authors b brief bug c callergraph callgraph category cite class code cond copybrief copydetails copydoc copyright date def defgroup deprecated details dir dontinclude dot dotfile e else elseif em endcode endcond enddot endhtmlonly endif endinternal endlatexonly endlink endmanonly endmsc endrtfonly endverbatim endxmlonly enum example exception extends file fn headerfile hideinitializer htmlinclude htmlonly if ifnot image implements include includelineno ingroup interface internal invariant latexonly li line link mainpage manonly memberof msc mscfile n name namespace nosubgrouping note overload p package page par paragraph param post pre private privatesection property protected protectedsection protocol public publicsection ref related relatedalso relates relatesalso remark remarks result return returns retval rtfonly sa section see short showinitializer since skip skipline snippet struct subpage subsection subsubsection tableofcontents test throw throws todo tparam typedef union until var verbatim verbinclude version warning weakgroup xmlonly xrefitem

[lexer_properties]
styling.within.preprocessor=1
lexer.cpp.track.preprocessor=0
preprocessor.symbol.$(file.patterns.cpp)=#
preprocessor.start.$(file.patterns.cpp)=if ifdef ifndef
preprocessor.middle.$(file.patterns.cpp)=else elif
preprocessor.end.$(file.patterns.cpp)=endif

[settings]
lexer_filetype=C

# default extension used when saving files
extension=rs

# the following characters are these which a "word" can contains, see documentation
#wordchars=_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

# single comments, like # in this file
comment_single=//
# multiline comments
comment_open=/*
comment_close=*/

# set to false if a comment character/string should start at column 0 of a line, true uses any
# indentation of the line, e.g. setting to true causes the following on pressing CTRL+d
	#command_example();
# setting to false would generate this
#	command_example();
# This setting works only for single line comments
comment_use_indent=true

# context action command (please see Geany's main documentation for details)
context_action_cmd=

[indentation]
#width=4
# 0 is spaces, 1 is tabs, 2 is tab & spaces
#type=1

[named_styles]
# Additional chromacoding contexts for rust, beyond those avaiable in default styles
# TODO move to filetypes.common when others have used it?
keyword=0x202020;0xffffff;true;false
operator=0x004020;0xffffff;false;false
delimiter=0x200040;0xffffff;false;false
special_delimiter=0x402000;0xffffff;false;false
struct=0x203040;0xffffff;true;false
trait=0x302040;0xffffff;true;false
impl=0x204030;0xffffff;true;false
enum=0x403020;0xffffff;true;false
type_decl=0x404020;0xffffff;true;false
fn=0x202040;0xc0c0c0;true;false
type_param=0x006040;0xffffff;false;false
type=0x002060;0xffffff;false;false
rcomment=0x909090
rcomment_doc=0x707070
rcomment_line=0x808080
rcomment_line_doc=comment_doc
rcomment_doc_keyword=comment_doc,bold
rcomment_doc_keyword_error=comment_doc,italic

[build_settings]
# %f will be replaced by the complete filename
# %e will be replaced by the filename without extension
# (use only one of it at one time)
compiler=rustc "%f"
linker=rustc -o "%e" "%f"
run_cmd="./%e"

